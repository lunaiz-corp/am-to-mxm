import type { Knex } from 'knex';

import createClient from 'openapi-fetch';
import type { paths } from '../__generated__/musixmatch'; // generated by openapi-typescript

import { BadRequestError } from '../exceptions/BadRequest.exception';

import { IAppleMusicUrl } from '../types/appleUrl.type';
import { EMxmUrlType, IMxmUrl } from '../types/mxmUrl.type';

import {
  getAppleDeveloperToken,
  getDefaultAppleDeveloperToken,
} from './appleToken.util';

const client = createClient<paths>({
  baseUrl: 'https://api.musixmatch.com/ws/1.1',
});

export async function requestToApple(
  data: IAppleMusicUrl,
  knex: Knex,
  byokTeamId?: string,
  byokKeyId?: string,
  byokKey?: string,
) {
  let url = `https://api.music.apple.com/v1/catalog/${data.storefront}/${data.type}`;

  if (data.url === 'ISRC') {
    url += `?filter[isrc]=${data.id}`;
  } else {
    url += `/${data.id}`;
  }

  return fetch(url, {
    headers: {
      Authorization: `Bearer ${
        byokTeamId && byokKeyId && byokKey
          ? await getAppleDeveloperToken(byokTeamId, byokKeyId, byokKey)
          : await getDefaultAppleDeveloperToken(knex)
      }`,
    },
  });
}

export function requestToMxm(data: IMxmUrl, byokKey?: string) {
  if (!process.env.MUSIXMATCH_API_KEY) {
    throw new Error('Musixmatch API key is not provided.');
  }

  const searchParams: {
    apikey: string;
    album_id?: string;
    commontrack_id?: string;
    album_vanity_id?: string;
    commontrack_vanity_id?: string;
    track_isrc?: string;
  } = {
    apikey: byokKey || process.env.MUSIXMATCH_API_KEY,
  };

  if (
    data.id &&
    (data.type === EMxmUrlType.ALBUM || data.type === EMxmUrlType.ALBUM_TRACKS)
  ) {
    searchParams.album_id = data.id;
  } else if (data.id && EMxmUrlType.TRACK) {
    searchParams.commontrack_id = data.id;
  } else if (
    data.vanityId &&
    (data.type === EMxmUrlType.ALBUM || data.type === EMxmUrlType.ALBUM_TRACKS)
  ) {
    searchParams.album_vanity_id = data.vanityId;
  } else if (data.vanityId && EMxmUrlType.TRACK) {
    searchParams.commontrack_vanity_id = data.vanityId;
  } else if (data.isrc) {
    searchParams.track_isrc = data.isrc;
  } else {
    throw new BadRequestError(
      'Unsupported URL format.\n' +
        'Working example: https://www.musixmatch.com/album/Mingturn/BLUE-EP',
    );
  }

  // return fetch(url.toString());
  return client.GET(`/${data.type}.get`, {
    params: {
      query: {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ...(searchParams as any),
      },
    },
  });
}
